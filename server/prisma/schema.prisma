generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int             @id @default(autoincrement())
  email      String          @unique
  username   String          @unique
  password   String
  created_at DateTime        @default(now())
  plans      Plans[]         // Relation to Plans (one-to-many)
  workouts   Workouts[]      // Relation to Workouts (one-to-many)
  lifts_data UserLiftsData[] // One-to-many with user-specific data 
}

model Plans {
  id             Int        @id @default(autoincrement())
  user_id        Int?       // Nullable for generic plans
  name           String
  categories     String[]
  description    String?
  duration_weeks Int
  difficulty     String
  goal           String
  created_at     DateTime   @default(now())
  user           Users?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  workouts       Workouts[] // Relation to Workouts (one-to-many)
  weeks          Week[]     // Relation to Week model
}

model Week {
  id          Int   @id @default(autoincrement())
  plan_id     Int
  week_number Int
  plan        Plans @relation(fields: [plan_id], references: [id], onDelete: Cascade)
  days        Day[] // Relation to Day model
}

model Day {
  id          Int          @id @default(autoincrement())
  week_id     Int
  day_of_week Int
  week        Week         @relation(fields: [week_id], references: [id], onDelete: Cascade)
  workoutDays WorkoutDay[] // Junction table to link Day and Workouts
}

model WorkoutDay {
  id         Int      @id @default(autoincrement())
  day_id     Int
  workout_id Int
  order      Int?
  day        Day      @relation(fields: [day_id], references: [id], onDelete: Cascade)
  workout    Workouts @relation(fields: [workout_id], references: [id], onDelete: Cascade)
}

model Workouts {
  id           Int          @id @default(autoincrement())
  user_id      Int?         // Nullable for generic workouts
  plan_id      Int?         // Nullable
  name         String
  week_number  Int
  plan_day     Int
  day_of_week  String
  iteration    Int?
  total_volume Int?
  created_at   DateTime     @default(now())
  user         Users?       @relation(fields: [user_id], references: [id], onDelete: SetNull)
  plan         Plans?       @relation(fields: [plan_id], references: [id], onDelete: SetNull)
  lifts        Lifts[]      // Relation to Lifts (one-to-many)
  workoutDays  WorkoutDay[] // Relation to WorkoutDay
}

model BaseLifts {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  description  String?
  video_url    String?
  muscle_group String
  lift_type    String
  equipment    String
  created_at   DateTime        @default(now())
  lifts        Lifts[]         // One-to-many with Lifts
  user_data    UserLiftsData[] // One-to-many with user-specific data
}

model UserLiftsData {
  id            Int       @id @default(autoincrement())
  user_id       Int
  base_lift_id  Int
  max_weights   Int[]
  rep_ranges    Int[]
  max_estimated Int[]
  created_at    DateTime  @default(now())
  user          Users     @relation(fields: [user_id], references: [id])
  base_lift     BaseLifts @relation(fields: [base_lift_id], references: [id])
}

model Lifts {
  id               Int             @id @default(autoincrement())
  workout_id       Int
  base_lift_id     Int
  name             String
  completed        Boolean         @default(false)
  sets             Int
  reps             String[]
  reps_achieved    Int[]
  weight           Int[]
  weight_achieved  Int[]
  rpe              String[]
  rpe_achieved     Int[]
  rest_time        Int[]
  volume           Int?
  progression_rule String?
  notes            String?
  created_at       DateTime        @default(now())
  workout          Workouts        @relation(fields: [workout_id], references: [id], onDelete: Cascade)
  base_lift        BaseLifts       @relation(fields: [base_lift_id], references: [id], onDelete: Cascade)
  superset_links   SupersetLinks[] @relation("LiftToSuperset")
  superset_linked  SupersetLinks[] @relation("SupersetToLift")
}

model SupersetLinks {
  id               Int      @id @default(autoincrement())
  lift_id          Int
  superset_lift_id Int
  created_at       DateTime @default(now())
  lift             Lifts    @relation("LiftToSuperset", fields: [lift_id], references: [id], onDelete: Cascade)
  superset_lift    Lifts    @relation("SupersetToLift", fields: [superset_lift_id], references: [id], onDelete: Cascade)
}