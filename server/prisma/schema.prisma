generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  username   String    @unique
  password   String
  created_at DateTime  @default(now())
  plans      Plans[]   // Relation to Plans (one-to-many)
  workouts   Workouts[] // Relation to Workouts (one-to-many)
  lifts_data UserLiftsData[] // one to many with user specific data 
}

model Plans {
  id              Int       @id @default(autoincrement())
  user_id         Int?      // Nullable for generic plans
  name            String
  categories      String[]
  description     String?
  duration_weeks  Int
  difficulty      String // default plan may have baseline difficulty, but user can change it
  goal            String // i.e. strength, hypertrophy, etc.
  created_at      DateTime  @default(now())
  user            Users?    @relation(fields: [user_id], references: [id])
  workouts        Workouts[] // Relation to Workouts (one-to-many)
}

model Workouts {
  id            Int       @id @default(autoincrement())
  user_id       Int?      // Nullable for generic workouts
  plan_id       Int?
  name          String
  week_number   Int
  plan_day      Int
  day_of_week   String
  iteration     Int? // if plan duplicates workouts
  total_volume  Int?
  created_at    DateTime  @default(now())
  user          Users?    @relation(fields: [user_id], references: [id])
  plan          Plans?     @relation(fields: [plan_id], references: [id])
  lifts         Lifts[]   // Relation to Lifts (one-to-many)
}

model BaseLifts {
  id                Int              @id @default(autoincrement())
  name              String           @unique // e.g., "Bench Press"
  description       String?          // e.g., "Compound chest exercise"
  video_url         String?          // Placeholder for video/GIF
  muscle_group      String           // e.g., "Chest"
  lift_type         String           // e.g., "Main", "Supplementary"
  equipment         String           // e.g., "Barbell"
  created_at        DateTime         @default(now())
  lifts             Lifts[]          // One-to-many with Lifts
  user_data         UserLiftsData[] // One-to-many with user-specific data
}

model UserLiftsData {
  id              Int       @id @default(autoincrement())
  user_id         Int
  base_lift_id    Int
  max_weights     Int[]      // Userâ€™s max weight for rep range (e.g., 315 lbs for 1-5 reps)
  rep_ranges      Int[]   // e.g., "1-5"
  max_estimated   Int[]
  created_at      DateTime  @default(now())
  user            Users     @relation(fields: [user_id], references: [id])
  base_lift       BaseLifts @relation(fields: [base_lift_id], references: [id])
}

model Lifts {
  id               Int       @id @default(autoincrement())
  workout_id       Int
  base_lift_id     Int
  name             String
  completed        Boolean   @default(false)
  sets             Int
  reps             String[]
  reps_achieved    Int[]
  weight           Int[]
  weight_achieved  Int[]
  rpe              String[]
  rpe_achieved     Int[]
  rest_time        Int[]
  volume           Int?
  progression_rule String?
  notes            String?
  created_at       DateTime  @default(now())
  workout          Workouts  @relation(fields: [workout_id], references: [id])
  base_lift        BaseLifts @relation(fields: [base_lift_id], references: [id])
  superset_links   SupersetLinks[] @relation("LiftToSuperset")
  superset_linked  SupersetLinks[] @relation("SupersetToLift")
}

model SupersetLinks {
  id            Int    @id @default(autoincrement())
  lift_id       Int    // First lift in superset
  superset_lift_id Int // Second lift in superset
  created_at    DateTime @default(now())
  lift          Lifts  @relation("LiftToSuperset",fields: [lift_id], references: [id])
  superset_lift Lifts  @relation("SupersetToLift", fields: [superset_lift_id], references: [id])
}